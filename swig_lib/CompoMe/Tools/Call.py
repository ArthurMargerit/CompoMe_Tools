# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Call
else:
    import _Call

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Call.delete_SwigPyIterator

    def value(self):
        return _Call.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _Call.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _Call.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _Call.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _Call.SwigPyIterator_equal(self, x)

    def copy(self):
        return _Call.SwigPyIterator_copy(self)

    def next(self):
        return _Call.SwigPyIterator_next(self)

    def __next__(self):
        return _Call.SwigPyIterator___next__(self)

    def previous(self):
        return _Call.SwigPyIterator_previous(self)

    def advance(self, n):
        return _Call.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _Call.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _Call.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _Call.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _Call.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _Call.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _Call.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _Call:
_Call.SwigPyIterator_swigregister(SwigPyIterator)

class Serializable_Item(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr

    def to_stream(self, *args):
        return _Call.Serializable_Item_to_stream(self, *args)

    def from_stream(self, *args):
        return _Call.Serializable_Item_from_stream(self, *args)

    def __str__(self):
        return _Call.Serializable_Item___str__(self)

    def from_string(self, arg2):
        return _Call.Serializable_Item_from_string(self, arg2)
    __swig_destroy__ = _Call.delete_Serializable_Item

# Register Serializable_Item in _Call:
_Call.Serializable_Item_swigregister(Serializable_Item)

class Serialization_context_import(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Call.Serialization_context_import_swiginit(self, _Call.new_Serialization_context_import())
    __swig_destroy__ = _Call.delete_Serialization_context_import

    def import_wanted(self, os):
        return _Call.Serialization_context_import_import_wanted(self, os)

    def get_loc(self, *args):
        return _Call.Serialization_context_import_get_loc(self, *args)

    def is_wanted_loc(self, arg2):
        return _Call.Serialization_context_import_is_wanted_loc(self, arg2)

    def is_wanted_loc_sp(self, p_ext):
        return _Call.Serialization_context_import_is_wanted_loc_sp(self, p_ext)

    def inscribe(self, p_ext, p_loc):
        return _Call.Serialization_context_import_inscribe(self, p_ext, p_loc)

    def is_inscribe(self, p_ext):
        return _Call.Serialization_context_import_is_inscribe(self, p_ext)

# Register Serialization_context_import in _Call:
_Call.Serialization_context_import_swigregister(Serialization_context_import)

class Serialization_context_export(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Call.Serialization_context_export_swiginit(self, _Call.new_Serialization_context_export())
    __swig_destroy__ = _Call.delete_Serialization_context_export

    def export_wanted(self, os):
        return _Call.Serialization_context_export_export_wanted(self, os)

    def want(self, arg2):
        return _Call.Serialization_context_export_want(self, arg2)

    def declare(self, arg2):
        return _Call.Serialization_context_export_declare(self, arg2)

    def is_declare(self, arg2):
        return _Call.Serialization_context_export_is_declare(self, arg2)

    def is_wanted(self, arg2):
        return _Call.Serialization_context_export_is_wanted(self, arg2)

# Register Serialization_context_export in _Call:
_Call.Serialization_context_export_swigregister(Serialization_context_export)


def get_type(_is):
    return _Call.get_type(_is)

def get_addr(_is):
    return _Call.get_addr(_is)

def get_word(_is, one_of):
    return _Call.get_word(_is, one_of)

def to_pointer(ptr):
    return _Call.to_pointer(ptr)

def p_to_stream(*args):
    return _Call.p_to_stream(*args)

def p_from_stream(*args):
    return _Call.p_from_stream(*args)

def __lshift__(*args):
    return _Call.__lshift__(*args)

def __rshift__(*args):
    return _Call.__rshift__(*args)
class Serializable_fac(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def get_inst():
        return _Call.Serializable_fac_get_inst()

    def build(self, p_type, p_stream, arg4):
        return _Call.Serializable_fac_build(self, p_type, p_stream, arg4)

    def build_sp(self, p_type, p_stream):
        return _Call.Serializable_fac_build_sp(self, p_type, p_stream)

    def subscribe(self, ss, v, v_sp):
        return _Call.Serializable_fac_subscribe(self, ss, v, v_sp)

# Register Serializable_fac in _Call:
_Call.Serializable_fac_swigregister(Serializable_fac)

def Serializable_fac_get_inst():
    return _Call.Serializable_fac_get_inst()

class Interface(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Call.Interface_swiginit(self, _Call.new_Interface())
    __swig_destroy__ = _Call.delete_Interface

    def get_caller_stream(self):
        return _Call.Interface_get_caller_stream(self)

    def get_caller_dbus(self):
        return _Call.Interface_get_caller_dbus(self)

    def is_fake(self):
        return _Call.Interface_is_fake(self)

# Register Interface in _Call:
_Call.Interface_swigregister(Interface)

class Fake_stream(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, arg2, arg3):
        _Call.Fake_stream_swiginit(self, _Call.new_Fake_stream(arg2, arg3))
    __swig_destroy__ = _Call.delete_Fake_stream

    def get_i(self):
        return _Call.Fake_stream_get_i(self)

    def get_o(self):
        return _Call.Fake_stream_get_o(self)

# Register Fake_stream in _Call:
_Call.Fake_stream_swigregister(Fake_stream)

class Caller_stream(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Call.delete_Caller_stream

    def call(self, *args):
        return _Call.Caller_stream_call(self, *args)

    def introspection(self, ss):
        return _Call.Caller_stream_introspection(self, ss)

# Register Caller_stream in _Call:
_Call.Caller_stream_swigregister(Caller_stream)

class Function_stream_recv(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Call.delete_Function_stream_recv

    def get_si(self):
        return _Call.Function_stream_recv_get_si(self)

    def pull(self):
        return _Call.Function_stream_recv_pull(self)

    def end(self):
        return _Call.Function_stream_recv_end(self)

    def get(self):
        return _Call.Function_stream_recv_get(self)

# Register Function_stream_recv in _Call:
_Call.Function_stream_recv_swigregister(Function_stream_recv)

class Function_stream_send(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Call.delete_Function_stream_send

    def get_so(self):
        return _Call.Function_stream_send_get_so(self)

    def start(self):
        return _Call.Function_stream_send_start(self)

    def send(self):
        return _Call.Function_stream_send_send(self)

# Register Function_stream_send in _Call:
_Call.Function_stream_send_swigregister(Function_stream_send)

class Return_stream_recv(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Call.delete_Return_stream_recv

    def get_si(self):
        return _Call.Return_stream_recv_get_si(self)

    def pull(self):
        return _Call.Return_stream_recv_pull(self)

    def end(self):
        return _Call.Return_stream_recv_end(self)

# Register Return_stream_recv in _Call:
_Call.Return_stream_recv_swigregister(Return_stream_recv)

class Return_stream_send(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Call.delete_Return_stream_send

    def get_so(self):
        return _Call.Return_stream_send_get_so(self)

    def start(self):
        return _Call.Return_stream_send_start(self)

    def send(self):
        return _Call.Return_stream_send_send(self)

# Register Return_stream_send in _Call:
_Call.Return_stream_send_swigregister(Return_stream_send)


def call(*args):
    return _Call.call(*args)
class call_result(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Call.call_result_swiginit(self, _Call.new_call_result(*args))
    first = property(_Call.call_result_first_get, _Call.call_result_first_set)
    second = property(_Call.call_result_second_get, _Call.call_result_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _Call.delete_call_result

# Register call_result in _Call:
_Call.call_result_swigregister(call_result)

class map_Caller_stream(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Call.map_Caller_stream_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Call.map_Caller_stream___nonzero__(self)

    def __bool__(self):
        return _Call.map_Caller_stream___bool__(self)

    def __len__(self):
        return _Call.map_Caller_stream___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _Call.map_Caller_stream___getitem__(self, key)

    def __delitem__(self, key):
        return _Call.map_Caller_stream___delitem__(self, key)

    def has_key(self, key):
        return _Call.map_Caller_stream_has_key(self, key)

    def keys(self):
        return _Call.map_Caller_stream_keys(self)

    def values(self):
        return _Call.map_Caller_stream_values(self)

    def items(self):
        return _Call.map_Caller_stream_items(self)

    def __contains__(self, key):
        return _Call.map_Caller_stream___contains__(self, key)

    def key_iterator(self):
        return _Call.map_Caller_stream_key_iterator(self)

    def value_iterator(self):
        return _Call.map_Caller_stream_value_iterator(self)

    def __setitem__(self, *args):
        return _Call.map_Caller_stream___setitem__(self, *args)

    def asdict(self):
        return _Call.map_Caller_stream_asdict(self)

    def __init__(self, *args):
        _Call.map_Caller_stream_swiginit(self, _Call.new_map_Caller_stream(*args))

    def empty(self):
        return _Call.map_Caller_stream_empty(self)

    def size(self):
        return _Call.map_Caller_stream_size(self)

    def swap(self, v):
        return _Call.map_Caller_stream_swap(self, v)

    def begin(self):
        return _Call.map_Caller_stream_begin(self)

    def end(self):
        return _Call.map_Caller_stream_end(self)

    def rbegin(self):
        return _Call.map_Caller_stream_rbegin(self)

    def rend(self):
        return _Call.map_Caller_stream_rend(self)

    def clear(self):
        return _Call.map_Caller_stream_clear(self)

    def get_allocator(self):
        return _Call.map_Caller_stream_get_allocator(self)

    def count(self, x):
        return _Call.map_Caller_stream_count(self, x)

    def erase(self, *args):
        return _Call.map_Caller_stream_erase(self, *args)

    def find(self, x):
        return _Call.map_Caller_stream_find(self, x)

    def lower_bound(self, x):
        return _Call.map_Caller_stream_lower_bound(self, x)

    def upper_bound(self, x):
        return _Call.map_Caller_stream_upper_bound(self, x)
    __swig_destroy__ = _Call.delete_map_Caller_stream

# Register map_Caller_stream in _Call:
_Call.map_Caller_stream_swigregister(map_Caller_stream)

class map_map_Caller_stream(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _Call.map_map_Caller_stream_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _Call.map_map_Caller_stream___nonzero__(self)

    def __bool__(self):
        return _Call.map_map_Caller_stream___bool__(self)

    def __len__(self):
        return _Call.map_map_Caller_stream___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _Call.map_map_Caller_stream___getitem__(self, key)

    def __delitem__(self, key):
        return _Call.map_map_Caller_stream___delitem__(self, key)

    def has_key(self, key):
        return _Call.map_map_Caller_stream_has_key(self, key)

    def keys(self):
        return _Call.map_map_Caller_stream_keys(self)

    def values(self):
        return _Call.map_map_Caller_stream_values(self)

    def items(self):
        return _Call.map_map_Caller_stream_items(self)

    def __contains__(self, key):
        return _Call.map_map_Caller_stream___contains__(self, key)

    def key_iterator(self):
        return _Call.map_map_Caller_stream_key_iterator(self)

    def value_iterator(self):
        return _Call.map_map_Caller_stream_value_iterator(self)

    def __setitem__(self, *args):
        return _Call.map_map_Caller_stream___setitem__(self, *args)

    def asdict(self):
        return _Call.map_map_Caller_stream_asdict(self)

    def __init__(self, *args):
        _Call.map_map_Caller_stream_swiginit(self, _Call.new_map_map_Caller_stream(*args))

    def empty(self):
        return _Call.map_map_Caller_stream_empty(self)

    def size(self):
        return _Call.map_map_Caller_stream_size(self)

    def swap(self, v):
        return _Call.map_map_Caller_stream_swap(self, v)

    def begin(self):
        return _Call.map_map_Caller_stream_begin(self)

    def end(self):
        return _Call.map_map_Caller_stream_end(self)

    def rbegin(self):
        return _Call.map_map_Caller_stream_rbegin(self)

    def rend(self):
        return _Call.map_map_Caller_stream_rend(self)

    def clear(self):
        return _Call.map_map_Caller_stream_clear(self)

    def get_allocator(self):
        return _Call.map_map_Caller_stream_get_allocator(self)

    def count(self, x):
        return _Call.map_map_Caller_stream_count(self, x)

    def erase(self, *args):
        return _Call.map_map_Caller_stream_erase(self, *args)

    def find(self, x):
        return _Call.map_map_Caller_stream_find(self, x)

    def lower_bound(self, x):
        return _Call.map_map_Caller_stream_lower_bound(self, x)

    def upper_bound(self, x):
        return _Call.map_map_Caller_stream_upper_bound(self, x)
    __swig_destroy__ = _Call.delete_map_map_Caller_stream

# Register map_map_Caller_stream in _Call:
_Call.map_map_Caller_stream_swigregister(map_map_Caller_stream)



